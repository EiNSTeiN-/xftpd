/*
 * Copyright (c) 2007, The xFTPd Project.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *     * Neither the name of the xFTPd Project nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 *     * Redistributions of this project or parts of this project in any form
 *       must retain the following aknowledgment:
 *       "This product includes software developed by the xFTPd Project.
 *        http://www.xftpd.com/ - http://www.xftpd.org/"
 *
 * THIS SOFTWARE IS PROVIDED BY THE xFTPd PROJECT ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE xFTPd PROJECT BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

$#include "config.h"

typedef struct {
	tolua_readonly collectible c @ collectible;

	tolua_readonly char *name;
	tolua_readonly char *value;
	
	/* comments just before this field */
	tolua_readonly char *comments;
} config_field;

typedef struct {
	tolua_readonly collectible c @ collectible;
	
	/* Fully qualified path to the file. */
	tolua_readonly char *filename;
	
	tolua_readonly bool is_saving; /* nonzero if the file is currently being saved. */
	tolua_readonly bool shouldsave; /* nonzero if the file should be saved to disk */
	
	/* timestamp at which the file was last saved. */
	tolua_readonly unsigned long long int savetime;
	
	/* comments after the last field are stored here... */
	tolua_readonly char *comments;
	
	/* All fields of the file */
	tolua_readonly struct collection *fields; /* struct config_field */
} config_file;

module config {
	struct collection *open_configs @ all;
	
	//custom: char *config_load_file @ load_file(char *filename, unsigned int *length);
	//custom: string, length config_load_file @ load_file(char *filename);
	
	//custom: char *config_raw_read @ raw_read(char *filename, char *param, char *default_value = NULL);
	bool config_raw_write @ raw_write(char *filename, char *param, char *new_value);
	
	config_file *config_open @ open(char *filename);
	void config_close @ close(config_file *config);
	
	config_file *config_volatile @ volatile();
	
	bool config_save @ save(config_file *config);
	
	char *config_pread @ read(config_file *config, char *param, char *default_value = NULL);
	bool config_write @ write(config_file *config, char *param, char *new_value);
	
	bool config_field_comment @ field_comment(config_file *config, const char *param, const char *new_comment);
	bool config_file_comment @ file_comment(config_file *config, const char *new_comment);
}

struct config_file {
	tolua_outside void config_close @ close();
	tolua_outside bool config_save @ save();
	
	tolua_outside char *config_pread @ read(char *param, char *default_value = NULL);
	tolua_outside bool config_write @ write(char *param, char *new_value);
	
	tolua_outside bool config_field_comment @ field_comment(const char *param, const char *new_comment);
	tolua_outside bool config_file_comment @ file_comment(const char *new_comment);
};
