/*
 * Copyright (c) 2007, The xFTPd Project.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *     * Neither the name of the xFTPd Project nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 *     * Redistributions of this project or parts of this project in any form
 *       must retain the following aknowledgment:
 *       "This product includes software developed by the xFTPd Project.
 *        http://www.xftpd.com/ - http://www.xftpd.org/"
 *
 * THIS SOFTWARE IS PROVIDED BY THE xFTPd PROJECT ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE xFTPd PROJECT BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

$#include "nuke.h"

typedef struct {
	collectible c @ collectible;

	/* parent nuke structure */
	nuke_ctx *nuke;
	
	/*
		we do not reference users here because it
		has to be valid even after the user is deleted
	*/
	char *name;

	/* ammount of credit nuked */
	unsigned long long int ammount;

} nuke_nukee;

typedef struct {
	collectible c @ collectible;

	/*
		nuked element, null if it has been deleted
		This is here only for convenience, you should
		use 'path' when possible.
	*/
	vfs_element *element;

	/* always point to the full path to the element */
	char *path;
	
	/* time at wich the directory was nuked */
	unsigned long long int timestamp;

	unsigned int multiplier;
	char *nuker;
	char *reason;

	/* struct nuke_nukee */
	_collection *nukees;

} nuke_ctx;

module nukees {

	nuke_nukee *nukee_add @ add(nuke_ctx *nuke, char *name, unsigned long long int ammount);
	nuke_nukee *nukee_get @ get(nuke_ctx *nuke, char *name);
	void nukee_del @ del(nuke_nukee *nukee);
}

module nukes {
	extern _collection *nukes @ all;
	
	nuke_ctx *nuke_add @ add(vfs_element *element, unsigned int multiplier, char *nuker, char *reason);
	void nuke_del @ del(nuke_ctx *nuke);
	
	nuke_ctx *nuke_check @ check(vfs_element *element);
}
