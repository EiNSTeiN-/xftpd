/*
 * Copyright (c) 2007, The xFTPd Project.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *     * Neither the name of the xFTPd Project nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 *     * Redistributions of this project or parts of this project in any form
 *       must retain the following aknowledgment:
 *       "This product includes software developed by the xFTPd Project.
 *        http://www.xftpd.com/ - http://www.xftpd.org/"
 *
 * THIS SOFTWARE IS PROVIDED BY THE xFTPd PROJECT ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE xFTPd PROJECT BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

$#include "mirror.h"

typedef struct {
	unsigned int finished;
	unsigned int pasv;
	
	/* transfer checksum */
	unsigned int checksum;
	unsigned long long int xfered; /* current size that has been transfered, updated by the stats */
	unsigned long long int last_alive; /* last time it was reported by the stats */

	slave_connection *cnx; /* slave connection */
	vfs_element *file; /* transfered file */
} mirror_side;

typedef struct {
	collectible c @ collectible;
	
	unsigned long long int uid; /* unique id shared with both slaves */
	unsigned long long int timestamp; /* transfer start */
	
	config_file *volatile_config;

	mirror_side source;
	mirror_side target;
} mirror_ctx;


typedef void* mirror_param;

module mirrors {
	extern _collection *mirrors @ all;

	mirror_ctx *mirror_lua_new @ start(
		slave_connection *src_cnx,
		vfs_element *src_file,
		slave_connection *dest_cnx,
		vfs_element *dest_file,
		char *func_name,
		mirror_param param
	);
	
	unsigned int mirror_cancel @ cancel(mirror_ctx *mirror);
}

