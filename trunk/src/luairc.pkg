/*
 * Copyright (c) 2007, The xFTPd Project.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *     * Neither the name of the xFTPd Project nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 *     * Redistributions of this project or parts of this project in any form
 *       must retain the following aknowledgment:
 *       "This product includes software developed by the xFTPd Project.
 *        http://www.xftpd.com/ - http://www.xftpd.org/"
 *
 * THIS SOFTWARE IS PROVIDED BY THE xFTPd PROJECT ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE xFTPd PROJECT BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

$#include "irccore.h"
$#include "tree.h"

typedef struct {
	tolua_readonly char *src;
	tolua_readonly char *dest;
	tolua_readonly char *args;
} irc_message;

typedef enum {
	IRC_SOURCE_ANY,
	IRC_SOURCE_CHANNEL,
	IRC_SOURCE_PRIVATE,
	IRC_SOURCE_NOTICE
} irc_source;

typedef struct {
	tolua_readonly collectible c @ collectible;

	tolua_readonly unsigned long long int timestamp; /* last JOIN command timestamp */
	tolua_readonly bool joined;

	tolua_readonly char *name;
	tolua_readonly char *key;
} irc_channel;

typedef struct {
	tolua_readonly bool connected;

	tolua_readonly collection *channels;

	tolua_readonly char *address;
	tolua_readonly unsigned short port;

	tolua_readonly char *nickname;
	tolua_readonly char *realname;
	tolua_readonly char *ident;

	tolua_readonly unsigned int delay; /* delay between messages, in milliseconds */
	tolua_readonly unsigned long long int timestamp; /* last send time */
} irc_server;

typedef struct {
	tolua_readonly char *hostname;
	tolua_readonly char *nick;
} irc_nick_change;

typedef struct {
	tolua_readonly char *hostname;
	tolua_readonly char *channel;
} irc_join_channel;

typedef struct {
	tolua_readonly char *hostname;
	tolua_readonly char *channel;
} irc_part_channel;

typedef struct {
	tolua_readonly char *hostname;
	tolua_readonly char *victim;
	tolua_readonly char *channel;
} irc_kick_user;

typedef struct {
	tolua_readonly char *hostname;
} irc_quit;

module irc {
	extern collection *irc_hooks @ hooks;
	extern irc_server irccore_server @ server;
	
	bool irc_connect @ connect(irc_server *server);
	void irc_disconnect @ disconnect(irc_server *server);

	bool irc_channel_add @ join(irc_server *server, char *name, char *key);

	bool irc_lua_raw @ raw(char *message);
	bool irc_lua_say @ say(char *channel, char *message);
	bool irc_lua_broadcast @ broadcast(char *group, char *message);
	
	//custom: bool irc_tree_add @ hook(collection *tree, char *trigger, (bool *)(irc_message *m), irc_source source = IRC_SOURCE_ANY);
}

struct irc_server {
	tolua_outside bool irc_connect @ connect();
	tolua_outside void irc_disconnect @ disconnect();

	tolua_outside bool irc_channel_add @ join(char *name, char *key);
};
