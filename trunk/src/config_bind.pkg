/*
 * Copyright (c) 2007, The xFTPd Project.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *
 *     * Neither the name of the xFTPd Project nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 *     * Redistributions of this project or parts of this project in any form
 *       must retain the following aknowledgment:
 *       "This product includes software developed by the xFTPd Project.
 *        http://www.xftpd.com/ - http://www.xftpd.org/"
 *
 * THIS SOFTWARE IS PROVIDED BY THE xFTPd PROJECT ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE xFTPd PROJECT BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

$#include "config.h"

typedef struct {
	collectible c @ collectible;
	int modified; /* since the last save */

	char *name;
	char *value;
} config_field;

typedef struct {
	collectible c @ collectible;
	
	unsigned long long int timeout; /* maximum time between each saves */
	unsigned long long int savetime; /* last time the file was saved to disk */
	int modified; /* 1 if any field was modified since the last save */

	/* Fully qualified path to the file. */
	char *filename;

	/* 1 if the file is loaded in memory */
	int loaded;

	/* All fields of the file */
	_collection *fields; /* struct config_field */
} config_file;

module config {
	/* use like: buffer, length = load_file(filename, length); */
	char *config_lua_load_file @ load_file(char *filename, unsigned int *length);
	
	char *config_raw_lua_read @ raw_read(char *filename, char *param, char *default_value = NULL);
	unsigned long long int config_raw_read_int @ raw_read_int(char *filename, char *param, unsigned long long int default_value);
	long long int config_raw_read_int @ raw_read_signed_int(char *filename, char *param, long long int default_value);

	unsigned int config_raw_write @ raw_write(char *filename, char *param, char *new_value);
	unsigned int config_raw_write_int @ raw_write_int(char *filename, char *param, unsigned long long int new_value);



	config_file *config_new @ new(char *filename, unsigned long long int timeout);
	void config_destroy @ destroy(config_file *config);

	int config_load @ load(config_file *config);
	int config_save @ save(config_file *config);

	char *config_lua_read @ read(config_file *config, char *param, char *default_value = NULL);
	unsigned long long int config_read_int @ read_int(config_file *config, char *param, unsigned long long int default_value);
	long long int config_read_int @ read_signed_int(config_file *config, char *param, long long int default_value);

	unsigned int config_write @ write(config_file *config, char *param, char *new_value);
	unsigned int config_write_int @ write_int(config_file *config, char *param, unsigned long long int new_value);
}
